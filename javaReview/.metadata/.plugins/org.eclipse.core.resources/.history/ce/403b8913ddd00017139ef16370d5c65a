package gurimpan;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.GridLayout;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Vector;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
// jmenuBar --> 클래스 객체를 만들어서 그것을
// 제이 메뉴바를 add해서 jframe에 붙이기 
// file-> jmenu --> jmenubar에 붙이기
// file--[save,load,exit] jmenuitem의 3 객체 --> jmunu에 붙이기

class myFrame extends JFrame {

	private JPanel leftPanel;
	private JPanel rightPanel;
	private JButton btn1;
	private JButton btn2;
	private JButton btn3;
	private Color btnColor;
	private Font font;
	private JButton buttonCliked;
	

	class Shape {
		int shapeId;
		int getX;
		int getY;

		Shape(int argId, int argX, int argY) {
			
			shapeId = argId;
			getX = argX;
			getY = argY;

		}
	}

	class Rectangle extends Shape {
		int width = 100;
		int hight = 100;

		Rectangle(int argX, int argY) {
			super(2, argX, argY);
		}
	}

	class Circle extends Shape {
		int width = 100;
		int hight = 100;

		Circle(int argX, int argY) {
			super(3, argX, argY);
		}
	}

	class Line extends Shape {
	
		Line(int argX, int argY) {
			super(1, argX, argY);
		}
	}

	// 생성자
    myFrame() {
		font = new Font("고딕", Font.BOLD, 50);
		Font font2 = new Font("고딕", Font.BOLD, 250);

    	
    	JMenuBar jmb = new JMenuBar();
        JMenu jm = new JMenu("file");
        jmb.add(jm).setFont(font2);
        
        JMenuItem jmiSave = new JMenuItem("Save"); 
        JMenuItem jmiLoad = new JMenuItem("Load"); 
        JMenuItem jmiExit = new JMenuItem("Exit"); 
        
        jm.add(jmiSave).setFont(font2);
        jm.add(jmiLoad).setFont(font2);
        jm.add(jmiExit).setFont(font2);
        
        
       
        
        
        
        
		this.getContentPane().setLayout(new GridLayout(0, 2));
		leftPanel = new JPanel();
		rightPanel = new RightPanelC();
		this.add(leftPanel); // 컴포넌트 추가
		this.add(rightPanel);

		leftPanel.setLayout(new GridLayout(3, 0));

		btn1 = new JButton(" 선 그리기 ");
		btn2 = new JButton(" 사각형 그리기 ");
		btn3 = new JButton(" 원 그리기 ");


		btnColor = btn1.getBackground();
		btnColor = btn2.getBackground();
		btnColor = btn3.getBackground();

		leftPanel.add(btn1).setFont(font);
		leftPanel.add(btn2).setFont(font);
		leftPanel.add(btn3).setFont(font);

		basic();
		createListner();
        setJMenuBar(jmb);
	}

	// 기본 틀
	public void basic() {

		this.setSize(1100, 1100);
		this.setTitle("그림판");
		this.setVisible(true);
		this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

	}

	// 리스너 생성
	public void createListner() {
		
		// 버튼 1번 눌렀을 경우
		this.btn1.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {

				if (e.getSource() != buttonCliked) {
					btn1.setBackground(Color.pink);
					if (buttonCliked != null) {
						buttonCliked.setBackground(btnColor);
					}

					buttonCliked = (JButton) e.getSource();
				}
			}

		});

		// 버튼 2번 눌렀을 경우
		this.btn2.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				if (e.getSource() != buttonCliked) {
					btn2.setBackground(Color.pink);
					if (buttonCliked != null) {
						buttonCliked.setBackground(btnColor);
					}
					buttonCliked = (JButton) e.getSource();
				}
			}

		});

		// 버튼 3번 눌렀을 경우
		this.btn3.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				if (e.getSource() != buttonCliked) {
					btn3.setBackground(Color.pink);
					if (buttonCliked != null) {
						buttonCliked.setBackground(btnColor);
					}

					buttonCliked = (JButton) e.getSource();
				}
			}
		});
	}

	// 이너 클래스
	class RightPanelC extends JPanel {

		Point startP;
		Point endP;

		Vector<Point> StartVectorP = new Vector<Point>(); // 시작점
		Vector<Point> EndVectorP = new Vector<Point>(); // 끝점

		private Vector<Shape> shapeList;
		
		RightPanelC() {

			shapeList = new Vector<>();
			this.addMouseListener(new MouseAdapter() {

				// 프레스드,릴리즈(마지막위치)
				public void mousePressed(MouseEvent e) {
					if (buttonCliked == btn1) {
						
						startP = e.getPoint(); // 클릭한 부분을 시작점
						StartVectorP.add(e.getPoint());

					}
				}

				public void mouseReleased(MouseEvent e) {
					if (buttonCliked == btn1) {

						endP = e.getPoint(); // 드래그 한 부분을 종료점
						EndVectorP.add(e.getPoint());
						Graphics g = rightPanel.getGraphics();
						g.drawLine(startP.x, startP.y, endP.x, endP.y);

						// repaint(); //다시 그리기
					}
				}

				public void mouseClicked(MouseEvent e) {

					if (buttonCliked == btn2) {
						Graphics g = rightPanel.getGraphics();
						g.drawRect(e.getX() - 50, e.getY() - 50, 100, 100);
						Rectangle re = new Rectangle(e.getX(), e.getY());
						shapeList.add((Shape) re);
					}

					if (buttonCliked == btn3) {
						Graphics g = rightPanel.getGraphics();
						g.drawOval(e.getX() - 50, e.getY() - 50, 100, 100);
						Circle ci = new Circle(e.getX(), e.getY());
						shapeList.add((Shape) ci);
					}
				}
				
			});
			
		}

		// 저장된 정보들을 가져오기 .... ! Vector ~
		public void paintComponent(Graphics g) {
			super.paintComponent(g); // 부모 페인트 호출
			 if (StartVectorP.size() != 0) {

			  for (int i = 0; i < StartVectorP.size(); i++) { // 벡터의 크기만큼..
			  Point sp = StartVectorP.get(i); // 벡터 값 추출
			  Point ep = EndVectorP.get(i); // 벡터 값 추출
			  EndVectorP.get(i); 
			  g.drawLine(sp.x, sp.y, ep.x, ep.y);
			  }
			 } 
			System.out.println(shapeList.size());
			for (int i = 0; i < shapeList.size(); i++) {
				
				Shape s = (Shape) shapeList.get(i);
				if (s.shapeId == 2) {
					Rectangle r = (Rectangle) s;
					g.drawRect(r.getX, r.getY, r.width, r.hight);
				}

				if (s.shapeId == 3) {
					Circle r = (Circle) s;
					g.drawOval(s.getX, s.getY, r.width, r.hight);
				}

			}
			if (startP != null) {
				g.drawLine(startP.x, startP.y, endP.x, endP.y);
			}

		}
	}

	// ============== 내렸다가 올려도 그 상태 그대로....!=================

	// 1. (rightPanel) 도형그릴때마다 저장 하기.
	// -----> 1) 그림 그려질 때마다 그 도형에대한 정보를 저장... 객체로 ! 클래스 정의를 할것
	// (공통점 : 첫 시작점이 존재한다. 이 도형의 아이디 ) ------ 다형성을 이용해서 ... !
	// 서로다른 도형들을 객체에 정의 한다.

	// 세 다른 것중에서 공통점이 존재한다.... 여기서 상속이 필요하다 !
	// -----> 2) 미리 정의된 객체를 가지고 배열에 저장한다 .

	// 2. 저장된 정보들을 가져와서 새롭게 그려주기.---> 라이트 판넬에서 그려주라

}

public class Gurimpan {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		new myFrame();
	}

}
